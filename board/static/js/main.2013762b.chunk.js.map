{"version":3,"sources":["utils/game-state.js","reducers/index.js","utils/url.js","components/blank-state.jsx","theme/index.js","components/loading-indicator.jsx","components/grid.jsx","components/board.jsx","io/websocket.js","utils/inline-svg.js","utils/engine-client.js","components/avatar.jsx","components/scoreboard.jsx","components/mediaControls.jsx","components/game.jsx","actions/index.js","containers/app.jsx","index.js"],"names":["DEFAULT_HEAD_DIRECTION","formatFrame","frame","Turn","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Snakes","Symbol","iterator","next","done","snake","value","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","Body","part","X","Y","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","Food","food","cleanFrame","positions","snakes","formatSnakes","turn","map","formatPosition","gameOver","isLastFrameOfGame","sanitizeFrame","sanitizedFrame","cloneDeep","i","headSvg","tailSvg","_id","formatSnake","body","p","partIndex","direction","getDirection","headDirection","shouldRender","isCovered","type","getType","x","y","formatSnakePart","color","Color","ID","name","Name","health","Health","isDead","Death","death","formatDeath","head","HeadType","tail","TailType","HeadSvg","TailSvg","cause","Cause","length","pos","a","b","filter","s","oneLeft","windowPostMessage","data","window","parent","postMessage","e","console","error","parseArg","parts","split","key","decodeURIComponent","makeQueryString","query","sep","result","concat","httpToWsProtocol","url","mappings","http","https","from","to","substr","Error","join","_len","arguments","Array","_key","reduce","current","cleanA","replace","cleanB","joinPair","BlankState","react_default","createElement","location","origin","React","Component","colors","breakpoints","themes","LoadingIndicatorWrapper","styled","display","alignItems","justifyContent","height","width","LoadingIndicator","className","style","HIGHLIGHT_DIM","DEAD_OPACITY","CELL_SIZE","CELL_SPACING","FOOD_SIZE","toFixed","toGridSpace","slot","getPartWidth","extraWidth","getPartHeight","extraHeight","getPartXOffset","xBias","getPartYOffset","yBias","getOpacity","highlightedSnake","range","size","push","Grid","snakeIndex","this","renderHeadPart","renderTailPart","behind","checkIfCornerPart","renderCornerPart","renderMiddlePart","highlighted","getHeadXOffset","getHeadYOffset","box","viewBox","baseVal","transform","halfX","halfY","getHeadTransform","viewBoxStr","fill","opacity","shapeRendering","dangerouslySetInnerHTML","__html","innerHTML","determineCornerType","d","getTailXOffset","getTailYOffset","getTailTransform","_this","unsortedSnakes","props","sortedSnakes","sort","viewBoxWidth","columns","viewBoxHeight","rows","maxWidth","maxHeight","_","row","col","theme","renderPart","f","foodIndex","cx","cy","r","renderGrid","Board","grid","streamAll","receive","Promise","resolve","reject","ws","WebSocket","addEventListener","obj","JSON","parse","close","loaded","getSvg","path","requireSvg","fetchSvg","_callee","response","svgText","svg","regenerator_default","wrap","_context","prev","fetch","sent","text","makeDom","abrupt","stop","wrapper","document","trim","firstChild","DEFAULT_SNAKE_HEAD","DEFAULT_SNAKE_TAIL","fetchResult","json","delay","millis","setTimeout","getAllSvgs","all","unique","Set","assignHeadAndTailUrls","getSnakeHeadSvgUrl","getSnakeTailSvgUrl","setHeadAndTailSvgs","_callee2","_context2","paths","t0","finish","isIllegalSvgPath","nameOrPath","indexOf","svgUrlFromName","base","relative","prepareFrame","_callee3","_context3","fetchGameInfo","baseUrl","gameId","get","fetchGameStart","_x5","_x6","_fetchGameStart","apply","_callee4","_context4","method","cache","streamAllFrames","_x7","_x8","_x9","_streamAllFrames","_callee6","receiveFrame","game","chain","onFrame","wsUrl","_context6","then","Object","asyncToGenerator","mark","_callee5","_context5","getFrameByTurn","frames","AvatarWrapper","marginBottom","paddingTop","paddingBottom","HealthBarWrapper","background","borderRadius","HealthBar","_ref","backgroundColor","CauseOfDeath","_ref2","padding","fontSize","Avatar","getReadableCauseOfDeath","Wrapper","_templateObject","hide","_templateObject2","Scoreboard","state","toggleHighlight","getSnakeToHighlight","highlightSnake","setState","_this2","aliveSnakes","aLower","toLowerCase","bLower","deadSnakes","reverse","orderSnakes","scoreboard_AvatarWrapper","onClick","avatar","MediaControlsWrapper","mediaControls_templateObject","TurnCount","ButtonWrapper","Button","mediaControls_templateObject2","MediaControls","handleReload","reloadGame","handlePlayPause","toggleGamePause","handleBackward","stepBackwardFrame","handleForward","stepForwardFrame","handleKeyEvent","keyEvents","renderControls","_this$props","currentFrame","hideControls","paused","disabled","react_keyboard_event_handler_default","handleKeys","onKeyEvent","q","PageWrapper","game_templateObject","GameBoardWrapper","BoardWrapper","game_templateObject2","_ref3","hideScoreboard","ScoreboardWrapper","_templateObject3","_ref4","Game","options","boardTheme","engine","setEngineOptions","fetchFrames","invalidArgs","blank_state","renderGame","loading_indicator","board","mediaControls","hideMediaControls","scoreboard","setCurrentFrame","dispatch","getState","_getState$engineOptio","autoplay","engineUrl","_frame2","engineOptions","status","Status","playFromFrame","_x","_x2","frameRate","frameIndex","slicedFrames","ceiledFps","delayMillis","_frame3","lastFrame","slice","Math","ceil","_x3","_x4","search","arg","connect","gameStatus","_getState","_getState2","_ref5","_getState3","nextFrame","stepToFrame","_x10","_ref6","_getState4","prevFrame","_x11","_x12","snakeId","middleware","applyMiddleware","thunkMiddleware","store","createStore","action","parseInt","objectSpread","Height","Width","toConsumableArray","id","find","render","es","app","getElementById"],"mappings":"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","file":"static/js/main.2013762b.chunk.js","sourcesContent":["import cloneDeep from \"lodash.clonedeep\";\n\nconst DEFAULT_HEAD_DIRECTION = \"up\";\n\nexport function formatFrame(frame) {\n  cleanFrame(frame);\n  const snakes = formatSnakes(frame.Snakes);\n  return {\n    turn: frame.Turn,\n    snakes: snakes,\n    food: formatPositions(frame.Food),\n    gameOver: isLastFrameOfGame(frame)\n  };\n}\n\nexport function sanitizeFrame(frame) {\n  // Copy without reference\n  const sanitizedFrame = cloneDeep(frame);\n\n  // nullify some fields\n  for (const i in sanitizedFrame.snakes) {\n    const snake = sanitizedFrame.snakes[i];\n    snake.headSvg = null;\n    snake.tailSvg = null;\n    snake._id = null;\n  }\n\n  return sanitizedFrame;\n}\n\nfunction formatSnakes(snakes) {\n  return snakes.map(formatSnake);\n}\n\nfunction formatSnake(snake) {\n  return {\n    body: snake.Body.map((p, i) => formatSnakePart(snake, i)),\n    color: snake.Color,\n    _id: snake.ID,\n    name: snake.Name,\n    health: snake.Health,\n    isDead: !!snake.Death,\n    death: formatDeath(snake.Death),\n    head: snake.HeadType,\n    tail: snake.TailType,\n    headSvg: snake.HeadSvg,\n    tailSvg: snake.TailSvg\n  };\n}\n\nfunction formatDeath(death) {\n  if (!death) {\n    return;\n  }\n\n  return {\n    cause: death.Cause,\n    turn: death.Turn || 0\n  };\n}\n\nfunction headDirection(snake) {\n  return snake.Body.length > 1\n    ? getDirection(snake.Body[1], snake.Body[0])\n    : DEFAULT_HEAD_DIRECTION;\n}\n\nfunction isCovered(snake, partIndex) {\n  const part = snake.Body[partIndex];\n  const next = snake.Body[partIndex - 1];\n\n  return next && next.X === part.X && next.Y === part.Y;\n}\n\nfunction formatSnakePart(snake, partIndex) {\n  const part = snake.Body[partIndex];\n  const next = snake.Body[partIndex - 1];\n  return {\n    direction: next ? getDirection(part, next) : headDirection(snake),\n    shouldRender: !isCovered(snake, partIndex),\n    type: getType(snake, partIndex),\n    x: part.X,\n    y: part.Y\n  };\n}\n\nfunction formatPositions(positions) {\n  return positions.map(formatPosition);\n}\n\nfunction formatPosition(pos) {\n  return {\n    x: pos.X,\n    y: pos.Y\n  };\n}\n\nfunction getDirection(a, b) {\n  if (a.X < b.X) {\n    return \"right\";\n  } else if (b.X < a.X) {\n    return \"left\";\n  } else if (a.Y < b.Y) {\n    return \"down\";\n  }\n  return \"up\";\n}\n\nfunction getType(snake, partIndex) {\n  if (partIndex === 0) {\n    return \"head\";\n  }\n\n  if (partIndex === snake.Body.length - 1) {\n    return \"tail\";\n  }\n\n  return \"body\";\n}\n\n// This is a workaround for fields that are omitted when they have the default\n// value. ie: int fields that need to default to 0 rather than undefined.\nfunction cleanFrame(frame) {\n  frame.Turn = frame.Turn || 0;\n\n  for (const snake of frame.Snakes) {\n    for (const part of snake.Body) {\n      part.X = part.X || 0;\n      part.Y = part.Y || 0;\n    }\n  }\n\n  for (const food of frame.Food) {\n    food.X = food.X || 0;\n    food.Y = food.Y || 0;\n  }\n}\n\nfunction oneLeft(snakes) {\n  const alive = snakes.filter(s => !s.death);\n  return alive.length <= 1;\n}\n\nexport function isLastFrameOfGame(frame) {\n  const snakes = formatSnakes(frame.Snakes);\n\n  if (snakes.length === 0) {\n    return true;\n  }\n\n  if (snakes.length === 1) {\n    return !!snakes[0].death;\n  }\n\n  return oneLeft(snakes);\n}\n","import { formatFrame, sanitizeFrame } from \"../utils/game-state\";\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n    case \"SET_ENGINE_OPTIONS\":\n      action.engineOptions.autoplay =\n        action.engineOptions.autoplay &&\n        action.engineOptions.autoplay === \"true\";\n      action.engineOptions.turn = parseInt(action.engineOptions.turn) || 0;\n      return { ...state, engineOptions: action.engineOptions };\n    case \"PAUSE_GAME\":\n      return { ...state, paused: true };\n    case \"GAME_OVER\":\n      return { ...state, paused: true };\n    case \"RESUME_GAME\":\n      return { ...state, paused: false };\n    case \"SET_GAME_STATUS\":\n      return { ...state, gameStatus: action.status };\n    case \"SET_CURRENT_FRAME\":\n      windowPostMessage({\n        action: action.type,\n        frame: sanitizeFrame(action.frame)\n      });\n      return { ...state, currentFrame: action.frame };\n    case \"RECEIVE_FRAME\":\n      const frame = formatFrame(action.frame);\n      return {\n        ...state,\n        grid: {\n          height: action.game.Game.Height,\n          width: action.game.Game.Width\n        },\n        frames: [...state.frames, frame] // Be smart: this consumes A LOT of memory...\n      };\n    case \"REQUEST_FRAMES\":\n      return { ...state };\n    case \"FETCH_FRAMES\":\n      return { ...state };\n    case \"HIGHLIGHT_SNAKE\":\n      windowPostMessage({\n        action: action.type,\n        id: action.snakeId,\n        name: action.snakeId\n          ? state.currentFrame.snakes.find(s => s._id === action.snakeId).name\n          : null\n      });\n      return { ...state, highlightedSnake: action.snakeId };\n    default:\n      return { ...state };\n  }\n};\n\nfunction windowPostMessage(data) {\n  if (!window.parent) {\n    return;\n  }\n  try {\n    window.parent.postMessage(data, \"*\");\n  } catch (e) {\n    console.error(e);\n  }\n}\n","// Creates a dictionary of parameters based on the given query string. q should\n// look like \"?foo=bar&thing=blah\".\nexport function parseQueryString(q) {\n  if (!q || !q.length) {\n    return {};\n  }\n\n  // Array of key/value pairs\n  const args = q\n    .substr(1)\n    .split(\"&\")\n    .map(parseArg);\n\n  // Convert to object\n  return args.reduce((result, arg) => {\n    result[arg.key] = arg.value;\n    return result;\n  }, {});\n}\n\n// Converts \"asdf=qwer\" to { asdf: \"qwer\" } or \"asdf\" to { asdf: true }. The\n// latter example is to allow switch-like parameters like ?enableThing without\n// an equals sign.\nfunction parseArg(a) {\n  const parts = a.split(\"=\");\n  const key = parts[0];\n  const value = parts[1] === undefined ? true : decodeURIComponent(parts[1]);\n  return { key, value };\n}\n\n// Converts { a: \"aaa\", b: \"bbb\" } to \"?a=aaa&b=bbb\"\nexport function makeQueryString(query) {\n  if (!query) {\n    return \"\";\n  }\n\n  let sep = \"?\";\n  let result = \"\";\n\n  for (const key in query) {\n    const value = query[key];\n    result += `${sep}${key}=${value}`;\n    sep = \"&\";\n  }\n\n  return result;\n}\n\n// Converts http://foo to ws://foo or https://foo to wss://foo\nexport function httpToWsProtocol(url) {\n  const mappings = {\n    http: \"ws\",\n    https: \"wss\"\n  };\n\n  for (const from in mappings) {\n    const to = mappings[from];\n    if (url.substr(0, from.length + 1) === from + \":\") {\n      return to + url.substr(from.length);\n    }\n  }\n\n  throw new Error(\"Invalid URL: \" + url);\n}\n\n// Joins path components and makes sure there is exactly one '/' separating\n// them.\nexport function join(...parts) {\n  function joinPair(a, b) {\n    const cleanA = a.replace(/\\/+$/, \"\");\n    const cleanB = b.replace(/^\\/+/, \"\");\n\n    if (cleanA === \"\") {\n      return cleanB;\n    }\n\n    if (cleanB === \"\") {\n      return cleanA;\n    }\n\n    return `${cleanA}/${cleanB}`;\n  }\n\n  return parts.reduce((current, next) => joinPair(current, next), \"\");\n}\n","import React from \"react\";\n\nclass BlankState extends React.Component {\n  render() {\n    return (\n      <div>\n        To run a game you need to specify engine and game parameters in the URL.\n        For example:\n        <pre>\n          {window.location.origin}?engine=&lt;ENGINE_URL&gt;&amp;game=&lt;GAME_ID&gt;\n        </pre>\n      </div>\n    );\n  }\n}\n\nexport default BlankState;\n","export const colors = {\n  // Page\n  pageBackground: \"transparent\",\n\n  // Grid\n  gridDot: \"#6a208f\",\n  food: \"#ff5c75\",\n\n  // Scoreboard\n  healthBar: \"#0f0\",\n  healthBarBackground: \"#fefefe\",\n  healthBarOutline: \"#666\",\n  healthBarDeathBackground: \"#f1f1f1\",\n  healthBarDeathBackgroundDark: \"#bbb\",\n\n  // Misc\n  lightText: \"#efefef\",\n  darkText: \"#222\",\n\n  // Colour names (from theme)\n  blue: \"#007bff\",\n  indigo: \"#6610f2\",\n  purple: \"#6f42c1\",\n  pink: \"#e83e8c\",\n  red: \"#dc3545\",\n  orange: \"#fd7e14\",\n  yellow: \"#ffc107\",\n  green: \"#28a745\",\n  teal: \"#20c997\",\n  cyan: \"#17a2b8\",\n  white: \"#fff\",\n  gray: \"#6c757d\",\n  grayLight: \"#f1f1f1\",\n  grayDark: \"#343a40\",\n  primary: \"#007bff\",\n  secondary: \"#6c757d\",\n  success: \"#28a745\",\n  info: \"#17a2b8\",\n  warning: \"#ffc107\",\n  danger: \"#dc3545\",\n  light: \"#f8f9fa\",\n  dark: \"#343a40\"\n\n  // OLD\n  // orange: \"#ffa500\",\n  // purple: \"#240458\",\n};\n\nexport const breakpoints = {\n  sm: \"576px\",\n  md: \"768px\",\n  lg: \"992px\",\n  xl: \"1200px\"\n};\n\nexport const themes = {\n  // Themes\n  dark: \"dark\",\n  light: \"light\"\n};\n","import React from \"react\";\nimport styled from \"react-emotion\";\n\nimport { colors } from \"../theme\";\n\nconst LoadingIndicatorWrapper = styled(\"div\")({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  height: \"100%\",\n  width: \"100%\"\n});\n\nclass LoadingIndicator extends React.Component {\n  render() {\n    return (\n      <LoadingIndicatorWrapper>\n        <div\n          className=\"la-ball-grid-beat la-dark la-2x\"\n          style={{\n            color: colors.food\n          }}\n        >\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n        </div>\n      </LoadingIndicatorWrapper>\n    );\n  }\n}\n\nexport default LoadingIndicator;\n","import React from \"react\";\nimport { colors, themes } from \"../theme\";\n\nconst HIGHLIGHT_DIM = 0.15;\nconst DARK_DIM = 0.75;\nconst DEAD_OPACITY = 0.1;\n\nconst CELL_SIZE = 20;\nconst CELL_SPACING = 4;\nconst FOOD_SIZE = (CELL_SIZE / 3.25).toFixed(2);\n\nfunction toGridSpace(slot) {\n  return (CELL_SIZE + CELL_SPACING) * slot + CELL_SPACING;\n}\n\nfunction getPartWidth(part) {\n  const extraWidth =\n    part.direction === \"left\" || part.direction === \"right\" ? CELL_SPACING : 0;\n  return CELL_SIZE + extraWidth;\n}\n\nfunction getPartHeight(part) {\n  const extraHeight =\n    part.direction === \"up\" || part.direction === \"down\" ? CELL_SPACING : 0;\n  return CELL_SIZE + extraHeight;\n}\n\nfunction getPartXOffset(part) {\n  const xBias = part.direction === \"left\" ? -CELL_SPACING : 0;\n  return toGridSpace(part.x) + xBias;\n}\n\nfunction getPartYOffset(part) {\n  const yBias = part.direction === \"up\" ? -CELL_SPACING : 0;\n  return toGridSpace(part.y) + yBias;\n}\n\nfunction getTailXOffset(part) {\n  switch (part.direction) {\n    case \"left\":\n      return toGridSpace(part.x) - CELL_SPACING;\n    case \"right\":\n      return toGridSpace(part.x) + CELL_SPACING;\n    default:\n      return toGridSpace(part.x);\n  }\n}\n\nfunction getTailYOffset(part) {\n  switch (part.direction) {\n    case \"up\":\n      return toGridSpace(part.y) - CELL_SPACING;\n    case \"down\":\n      return toGridSpace(part.y) + CELL_SPACING;\n    default:\n      return toGridSpace(part.y);\n  }\n}\n\nfunction getHeadXOffset(part) {\n  switch (part.direction) {\n    case \"left\":\n      return toGridSpace(part.x);\n    case \"right\":\n      return toGridSpace(part.x);\n    default:\n      return toGridSpace(part.x);\n  }\n}\n\nfunction getHeadYOffset(part) {\n  switch (part.direction) {\n    case \"up\":\n      return toGridSpace(part.y);\n    case \"down\":\n      return toGridSpace(part.y);\n    default:\n      return toGridSpace(part.y);\n  }\n}\n\nfunction getOpacity(snake, highlightedSnake) {\n  if (!snake.isDead) {\n    if (highlightedSnake) {\n      return snake._id === highlightedSnake ? 1 : HIGHLIGHT_DIM;\n    }\n  } else {\n    if (highlightedSnake) {\n      return snake._id === highlightedSnake ? 1 : 0;\n    }\n  }\n\n  return snake.isDead ? DEAD_OPACITY : 1;\n}\n\nfunction range(size) {\n  const result = [];\n  for (let i = 0; i < size; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction sortAliveSnakesOnTop(snakes) {\n  return snakes.concat().sort((a, b) => {\n    const aOrder = a.isDead ? 0 : 1;\n    const bOrder = b.isDead ? 0 : 1;\n    return aOrder - bOrder;\n  });\n}\n\nfunction getHeadTransform(direction, viewBox) {\n  const halfX = viewBox.width / 2;\n  const halfY = viewBox.height / 2;\n  switch (direction) {\n    case \"left\":\n      return `rotate(180 ${halfX} ${halfY})`;\n    case \"up\":\n      return `rotate(-90 ${halfX} ${halfY})`;\n    case \"down\":\n      return `rotate(90 ${halfX} ${halfY})`;\n    default:\n      return \"\";\n  }\n}\n\nfunction getTailTransform(direction, viewBox) {\n  const halfX = viewBox.width / 2;\n  const halfY = viewBox.height / 2;\n  switch (direction) {\n    case \"right\":\n      return `rotate(180 ${halfX} ${halfY})`;\n    case \"down\":\n      return `rotate(-90 ${halfX} ${halfY})`;\n    case \"up\":\n      return `rotate(90 ${halfX} ${halfY})`;\n    default:\n      return \"\";\n  }\n}\n\nfunction checkIfCornerPart(snake, partIndex) {\n  // If head or tail of the snake, then false\n  if (partIndex === 0 || partIndex === snake.body.length - 1) return false;\n\n  const behind = snake.body[partIndex + 1];\n  const current = snake.body[partIndex];\n\n  // Return false if the behind part has the same position as the current.\n  // Relevant for when the snake initially spawns.\n  if (behind.x === current.x && behind.y === current.y) return false;\n\n  return behind.direction !== current.direction;\n}\n\nfunction determineCornerType(snake, partIndex) {\n  // If head or tail of the snake, then false\n  if (partIndex === 0 || partIndex === snake.body.length - 1) return false;\n\n  const behind = snake.body[partIndex + 1];\n  const current = snake.body[partIndex];\n\n  return `${current.direction} ${behind.direction}`;\n}\n\nclass Grid extends React.Component {\n  renderPart(snake, snakeIndex, part, partIndex, highlightedSnake) {\n    switch (part.type) {\n      case \"head\":\n        return this.renderHeadPart(snake, snakeIndex, part, highlightedSnake);\n      case \"tail\":\n        return this.renderTailPart(snake, snakeIndex, part, highlightedSnake);\n      default:\n        if (checkIfCornerPart(snake, partIndex)) {\n          return this.renderCornerPart(\n            snake,\n            snakeIndex,\n            part,\n            partIndex,\n            highlightedSnake\n          );\n        } else {\n          return this.renderMiddlePart(\n            snake,\n            snakeIndex,\n            part,\n            partIndex,\n            highlightedSnake\n          );\n        }\n    }\n  }\n\n  renderHeadPart(snake, snakeIndex, part, highlighted) {\n    const x = getHeadXOffset(part);\n    const y = getHeadYOffset(part);\n    const box = snake.headSvg.viewBox.baseVal;\n    const transform = getHeadTransform(part.direction, box);\n    const viewBoxStr = `${box.x} ${box.y} ${box.width} ${box.height}`;\n\n    return (\n      <svg\n        key={\"part\" + snakeIndex + \",head\"}\n        viewBox={viewBoxStr}\n        x={x}\n        y={y}\n        width={CELL_SIZE}\n        height={CELL_SIZE}\n        fill={snake.color}\n        opacity={getOpacity(snake, highlighted)}\n        shapeRendering=\"optimizeSpeed\"\n      >\n        <g\n          transform={transform}\n          dangerouslySetInnerHTML={{ __html: snake.headSvg.innerHTML }}\n        />\n      </svg>\n    );\n  }\n\n  renderMiddlePart(snake, snakeIndex, part, partIndex, highlighted) {\n    if (!part.shouldRender) {\n      return <svg key={\"part\" + snakeIndex + \",\" + partIndex} />;\n    }\n\n    return (\n      <rect\n        key={`part${snakeIndex},${part.x},${part.y}`}\n        x={getPartXOffset(part)}\n        y={getPartYOffset(part)}\n        width={getPartWidth(part)}\n        height={getPartHeight(part)}\n        fill={snake.color}\n        opacity={getOpacity(snake, highlighted)}\n        shapeRendering=\"optimizeSpeed\"\n      />\n    );\n  }\n\n  renderCornerPart(snake, snakeIndex, part, partIndex, highlighted) {\n    if (!part.shouldRender) {\n      return (\n        <svg\n          key={`part${snakeIndex},${part.x},${part.y}`}\n          shapeRendering=\"optimizeSpeed\"\n        />\n      );\n    }\n\n    let viewBox, transform;\n    let path = \"M0,0 h40 a60,60 0 0 1 60,60 v80 h-100 z\";\n\n    switch (part.direction) {\n      case \"left\":\n      case \"right\":\n        viewBox = \"0 0 120 100\";\n        break;\n      case \"up\":\n      case \"down\":\n      default:\n        viewBox = \"0 0 100 120\";\n        break;\n    }\n\n    switch (determineCornerType(snake, partIndex)) {\n      case \"down left\":\n        transform = \"scale(-1,1) translate(-100, 0)\";\n        break;\n      case \"left down\":\n        transform = \"rotate(90,0,0) translate(0,-120)\";\n        break;\n      case \"right down\":\n        transform = \"rotate(90,0,0) scale(1,-1)\";\n        break;\n      case \"up right\":\n        transform = \"scale(1,-1) translate(0,-120)\";\n        break;\n      case \"up left\":\n        transform = \"scale(-1,-1) translate(-100,-120)\";\n        break;\n      case \"right up\":\n        transform = \"rotate(-90,0,0) translate(-100,0)\";\n        break;\n      case \"left up\":\n        transform = \"rotate(-90,0,0) scale(1,-1) translate(-100,-120)\";\n        break;\n      case \"down right\":\n      default:\n        break;\n    }\n\n    return (\n      <svg\n        key={`part${snakeIndex},${part.x},${part.y}`}\n        x={getPartXOffset(part)}\n        y={getPartYOffset(part)}\n        width={getPartWidth(part)}\n        height={getPartHeight(part)}\n        opacity={getOpacity(snake, highlighted)}\n        fill={snake.color}\n        viewBox={viewBox}\n        shapeRendering=\"optimizeSpeed\"\n      >\n        <path d={path} transform={transform} />\n      </svg>\n    );\n  }\n\n  renderTailPart(snake, snakeIndex, part, highlighted) {\n    const x = getTailXOffset(part);\n    const y = getTailYOffset(part);\n    const box = snake.tailSvg.viewBox.baseVal;\n    const transform = getTailTransform(part.direction, box);\n    const viewBoxStr = `${box.x} ${box.y} ${box.width} ${box.height}`;\n\n    if (!part.shouldRender) {\n      return <svg key={\"part\" + snakeIndex + \",tail\"} />;\n    }\n\n    return (\n      <svg\n        key={\"part\" + snakeIndex + \",tail\"}\n        viewBox={viewBoxStr}\n        x={x}\n        y={y}\n        width={CELL_SIZE}\n        height={CELL_SIZE}\n        fill={snake.color}\n        opacity={getOpacity(snake, highlighted)}\n        shapeRendering=\"optimizeSpeed\"\n      >\n        <g\n          transform={transform}\n          dangerouslySetInnerHTML={{ __html: snake.tailSvg.innerHTML }}\n        />\n      </svg>\n    );\n  }\n\n  renderGrid() {\n    const unsortedSnakes = this.props.snakes || [];\n    const food = this.props.food || [];\n\n    // Make alive snakes render on top of dead snakes\n    const sortedSnakes = sortAliveSnakesOnTop(unsortedSnakes);\n\n    const viewBoxWidth = toGridSpace(this.props.columns);\n    const viewBoxHeight = toGridSpace(this.props.rows);\n\n    return (\n      <svg\n        width={this.props.maxWidth}\n        height={this.props.maxHeight}\n        x={this.props.x}\n        y={this.props.y}\n        viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeight}`}\n      >\n        {range(this.props.rows).map((_, row) =>\n          range(this.props.columns).map((_, col) => (\n            <rect\n              key={\"cell\" + row + \",\" + col}\n              x={toGridSpace(col)}\n              y={toGridSpace(row)}\n              width={CELL_SIZE}\n              height={CELL_SIZE}\n              fill={\n                this.props.theme === themes.dark ? \"#ddd\" : colors.grayLight\n              }\n              opacity={this.props.theme === themes.dark ? DARK_DIM : null}\n              shapeRendering=\"optimizeSpeed\"\n            />\n          ))\n        )}\n\n        {sortedSnakes.map((snake, snakeIndex) => {\n          return snake.body.map((part, partIndex) =>\n            this.renderPart(\n              snake,\n              snakeIndex,\n              part,\n              partIndex,\n              this.props.highlightedSnake\n            )\n          );\n        })}\n\n        {food.map((f, foodIndex) => (\n          <circle\n            key={\"food\" + foodIndex}\n            cx={toGridSpace(f.x) + CELL_SIZE / 2}\n            cy={toGridSpace(f.y) + CELL_SIZE / 2}\n            r={FOOD_SIZE}\n            fill={colors.food}\n            shapeRendering=\"optimizeQuality\"\n          />\n        ))}\n      </svg>\n    );\n  }\n\n  render() {\n    if (this.props.snakes) {\n      return this.renderGrid();\n    } else {\n      return;\n    }\n  }\n}\n\nexport default Grid;\n","import React from \"react\";\nimport Grid from \"./grid\";\n\nconst BOARD_SIZE = 100;\n\nclass Board extends React.Component {\n  render() {\n    return (\n      <svg viewBox={`0 0 ${BOARD_SIZE} ${BOARD_SIZE}`}>\n        <Grid\n          snakes={this.props.snakes}\n          food={this.props.food}\n          columns={this.props.columns}\n          rows={this.props.rows}\n          highlightedSnake={this.props.highlightedSnake}\n          theme={this.props.theme}\n          maxWidth={BOARD_SIZE}\n          maxHeight={BOARD_SIZE}\n          x={0}\n          y={0}\n        />\n      </svg>\n    );\n  }\n}\n\nexport default Board;\n","// Establishes websocket connection on given url and then calls receive for\n// every object sent from the server. Returns a promise that resolves when\n// receive returns true or when the server closes the connection.\nexport function streamAll(url, receive) {\n  let done = false;\n\n  return new Promise((resolve, reject) => {\n    const ws = new WebSocket(url);\n    ws.addEventListener(\"message\", e => {\n      const obj = JSON.parse(e.data);\n      done = receive(obj);\n      if (done) {\n        ws.close();\n        resolve();\n      }\n    });\n\n    ws.addEventListener(\"onerror\", e => {\n      reject(e);\n    });\n\n    ws.addEventListener(\"onclose\", e => {\n      if (!done) {\n        done = true;\n        resolve();\n      }\n    });\n  });\n}\n","/**\n * This file contains helper functions for async loading svg files that\n * can be injected inline into an html <svg> element. This is better than\n * alternatives for the following reasons:\n *\n *    <use href=\"...\"> has a problem where the game could start before the\n *    svg has finished loading whereas this method gives a promise we can wait\n *    for.\n *\n *    <image src=\"...\"> has a problem where the fill color of the image cannot\n *    be overriden. Inline svg solves this problem and allows css styles to\n *    cascade into the svg content. <use> may also have this problem?\n *\n *    Directly embedding the svg xml into react components (or similar) would\n *    mostly solve everything except that it eliminates the possibility of\n *    pulling in svg data from external trusted sources.\n *\n * The main downside to this method is that the source of the svg must be\n * trusted or else you are vulnerable to xss attacks.\n */\n\nconst loaded = {};\n\nexport function loadSvgs(paths) {\n  return Promise.all(paths.map(requireSvg));\n}\n\nexport function getSvg(path) {\n  return loaded[path];\n}\n\nfunction requireSvg(path) {\n  if (path in loaded) {\n    return Promise.resolve(loaded[path]);\n  }\n\n  return fetchSvg(path);\n}\n\nasync function fetchSvg(path) {\n  const response = await fetch(path);\n  const svgText = await response.text();\n  const svg = makeDom(svgText);\n  loaded[path] = svg;\n  return svg;\n}\n\nfunction makeDom(svgText) {\n  const wrapper = document.createElement(\"div\");\n  wrapper.innerHTML = svgText.trim();\n  return wrapper.firstChild;\n}\n","import { streamAll } from \"../io/websocket\";\nimport { makeQueryString, httpToWsProtocol, join } from \"./url\";\nimport { loadSvgs, getSvg } from \"./inline-svg\";\nimport { isLastFrameOfGame } from \"./game-state\";\n\nconst DEFAULT_SNAKE_HEAD = \"tongue\";\nconst DEFAULT_SNAKE_TAIL = \"bolt\";\n\nasync function get(url, query) {\n  const fetchResult = await fetch(url + makeQueryString(query));\n  return fetchResult.json();\n}\n\nexport function delay(millis) {\n  return new Promise(resolve => setTimeout(resolve, millis));\n}\n\nexport function getReadableCauseOfDeath(cause) {\n  // Based on https://github.com/battlesnakeio/engine/blob/master/rules/death_cause.go\n\n  switch (cause) {\n    case \"snake-collision\":\n      return \"Collided with snake body\";\n    case \"snake-self-collision\":\n      return \"Collided with own body\";\n    case \"starvation\":\n      return \"Starvation\";\n    case \"head-collision\":\n      return \"Head on head collision\";\n    case \"wall-collision\":\n      return \"Collided with a wall\";\n    default:\n      return cause;\n  }\n}\n\n// Gets a list of all unique SVG paths required by the snakes.\nfunction getAllSvgs(snakes) {\n  const all = snakes.reduce((result, snake) => {\n    return result.concat([snake.HeadType, snake.TailType]);\n  }, []);\n  const unique = new Set(all);\n  return Array.from(unique);\n}\n\nfunction assignHeadAndTailUrls(snakes) {\n  for (const snake of snakes) {\n    // Assign default if missing\n    if (!snake.HeadType) {\n      snake.HeadType = DEFAULT_SNAKE_HEAD;\n    }\n    if (!snake.TailType) {\n      snake.TailType = DEFAULT_SNAKE_TAIL;\n    }\n\n    // Format as actual URL if it's just a name\n    snake.HeadType = getSnakeHeadSvgUrl(snake.HeadType);\n    snake.TailType = getSnakeTailSvgUrl(snake.TailType);\n  }\n}\n\nasync function setHeadAndTailSvgs(snakes) {\n  assignHeadAndTailUrls(snakes);\n  await loadSvgs(getAllSvgs(snakes));\n\n  for (const snake of snakes) {\n    snake.HeadSvg = getSvg(snake.HeadType);\n    snake.TailSvg = getSvg(snake.TailType);\n  }\n}\n\nfunction isIllegalSvgPath(nameOrPath) {\n  return nameOrPath.indexOf(\"/\") >= 0 || nameOrPath.indexOf(\".\") >= 0;\n}\n\nfunction svgUrlFromName(base, relative) {\n  return join(base, relative) + \".svg\";\n}\n\nfunction getSnakeHeadSvgUrl(path) {\n  const effectivePath = isIllegalSvgPath(path) ? DEFAULT_SNAKE_HEAD : path;\n  return svgUrlFromName(\"images/snake/head\", effectivePath);\n}\n\nfunction getSnakeTailSvgUrl(path) {\n  const effectivePath = isIllegalSvgPath(path) ? DEFAULT_SNAKE_TAIL : path;\n  return svgUrlFromName(\"images/snake/tail\", effectivePath);\n}\n\nasync function prepareFrame(frame) {\n  await setHeadAndTailSvgs(frame.Snakes);\n}\n\nexport function fetchGameInfo(baseUrl, gameId) {\n  const url = join(baseUrl, `games/${gameId}`);\n  return get(url);\n}\n\nexport async function fetchGameStart(baseUrl, gameId) {\n  const url = join(baseUrl, `games/${gameId}/start`);\n  // Only returns a 200 OK with no data, don't need to deal with the response\n  await fetch(url, {\n    method: \"POST\",\n    cache: \"no-cache\"\n  });\n}\n\nexport async function streamAllFrames(baseUrl, gameId, receiveFrame) {\n  const game = await fetchGameInfo(baseUrl, gameId);\n\n  let chain = Promise.resolve();\n  function onFrame(frame) {\n    chain = chain.then(async () => {\n      await prepareFrame(frame);\n      return receiveFrame(game, frame);\n    });\n    return isLastFrameOfGame(frame);\n  }\n\n  const wsUrl = join(httpToWsProtocol(baseUrl), `socket/${gameId}`);\n  await streamAll(wsUrl, onFrame);\n  await chain;\n}\n\nexport function getFrameByTurn(frames, turn) {\n  return frames.filter(frame => frame.turn === turn)[0];\n}\n","import React from \"react\";\nimport styled from \"react-emotion\";\nimport { colors, themes } from \"../theme\";\nimport { getReadableCauseOfDeath } from \"../utils/engine-client\";\n\nconst AvatarWrapper = styled(\"div\")({\n  marginBottom: \".5rem\",\n  paddingTop: \"1rem\",\n  width: \"100%\",\n  paddingBottom: \"1rem\"\n});\n\nconst Name = styled(\"span\")({\n  display: \"block\",\n  paddingBottom: \"1rem\"\n});\n\nconst HealthBarWrapper = styled(\"div\")({\n  width: \"100%\",\n  height: \"1.8rem\",\n  background: colors.healthBarBackground,\n  borderRadius: \"1.5rem\"\n});\n\nconst HealthBar = styled(\"div\")(({ color }) => ({\n  height: \"100%\",\n  backgroundColor: color,\n  borderRadius: \"inherit\"\n}));\n\nconst CauseOfDeath = styled(\"div\")(({ theme }) => ({\n  height: \"100%\",\n  padding: \".2rem .5rem\",\n  fontSize: \"1.2rem\",\n  backgroundColor:\n    theme === themes.dark\n      ? colors.healthBarDeathBackgroundDark\n      : colors.healthBarDeathBackground,\n  borderRadius: \"inherit\",\n  color: colors.darkText\n}));\n\nclass Avatar extends React.Component {\n  render() {\n    return (\n      <AvatarWrapper>\n        <Name>{this.props.snake.name}</Name>\n        <HealthBarWrapper>\n          {this.props.snake.death ? (\n            <CauseOfDeath theme={this.props.theme}>\n              {getReadableCauseOfDeath(this.props.snake.death.cause)}\n            </CauseOfDeath>\n          ) : (\n            <HealthBar\n              color={this.props.snake.color}\n              style={{\n                width: `${this.props.snake.health}%`\n              }}\n            />\n          )}\n        </HealthBarWrapper>\n      </AvatarWrapper>\n    );\n  }\n}\n\nexport default Avatar;\n","import React from \"react\";\nimport styled from \"react-emotion\";\nimport Avatar from \"./avatar\";\nimport { breakpoints, colors, themes } from \"../theme\";\n\nconst orderSnakes = snakes => {\n  // Sort by name\n  const aliveSnakes = snakes\n    .filter(s => !s.isDead)\n    .sort((a, b) => {\n      const aLower = a.name.toLowerCase();\n      const bLower = b.name.toLowerCase();\n      if (aLower < bLower) {\n        return -1;\n      }\n      if (aLower > bLower) {\n        return 1;\n      }\n      return 0;\n    });\n\n  // Sort by turn died, descending\n  const deadSnakes = snakes\n    .filter(s => s.isDead)\n    .sort((a, b) => a.death.turn - b.death.turn)\n    .reverse();\n\n  return aliveSnakes.concat(deadSnakes);\n};\n\nconst Wrapper = styled(\"div\")`\n  display: none;\n  padding-right: 2rem;\n  color: ${({ theme }) =>\n    theme === themes.dark ? colors.lightText : colors.darkText};\n  font-weight: 700;\n  font-size: 2.2rem;\n\n  @media (min-width: ${breakpoints.md}) {\n    display: ${({ hide }) => (hide ? \"none\" : \"block\")};\n  }\n`;\n\nconst AvatarWrapper = styled(\"div\")`\n  transition: background-color 0.2s, box-shadow 0.2s;\n  box-shadow: ${props =>\n    props.highlighted ? `0 0 0 1px ${colors.lightText}` : null};\n\n  &:hover {\n    background-color: ${props =>\n      props.theme === themes.dark ? colors.purple : colors.light};\n    cursor: pointer;\n  }\n`;\n\nclass Scoreboard extends React.Component {\n  state = {\n    highlightedSnake: null\n  };\n\n  toggleHighlight = snake => {\n    const getSnakeToHighlight = (state, snake) => {\n      return state.highlightedSnake !== snake._id ? snake._id : null;\n    };\n\n    this.props.highlightSnake(getSnakeToHighlight(this.state, snake));\n\n    this.setState(state => ({\n      highlightedSnake: getSnakeToHighlight(state, snake)\n    }));\n  };\n\n  render() {\n    const { highlightedSnake } = this.state;\n    return (\n      <Wrapper theme={this.props.theme}>\n        {this.props.snakes\n          ? orderSnakes(this.props.snakes).map((snake, i) => (\n              <AvatarWrapper\n                key={\"avatarwrapper\" + i}\n                onClick={() => this.toggleHighlight(snake)}\n                highlighted={highlightedSnake === snake._id}\n                theme={this.props.theme}\n              >\n                <Avatar\n                  snake={snake}\n                  key={\"avatar\" + i}\n                  theme={this.props.theme}\n                />\n              </AvatarWrapper>\n            ))\n          : undefined}\n      </Wrapper>\n    );\n  }\n}\n\nexport default Scoreboard;\n","import React from \"react\";\nimport styled from \"react-emotion\";\nimport KeyboardEventHandler from \"react-keyboard-event-handler\";\n\nimport { breakpoints, themes } from \"../theme\";\n\nconst MediaControlsWrapper = styled(\"div\")`\n  display: none;\n  margin-top: 1rem;\n  width: 100%;\n\n  @media (min-width: ${breakpoints.md}) {\n    display: ${({ hide }) => (hide ? \"none\" : \"block\")};\n  }\n`;\n\nconst TurnCount = styled(\"div\")({\n  display: \"flex\",\n  justifyContent: \"center\",\n  width: \"100%\",\n  marginBottom: \"2rem\",\n  color: \"#777\"\n});\n\nconst ButtonWrapper = styled(\"div\")({\n  display: \"flex\",\n  justifyContent: \"center\",\n  width: \"100%\"\n});\n\nconst Button = styled(\"button\")`\n  display: inline-block;\n  min-width: 10rem;\n  text-align: center;\n  background: transparent;\n  color: ${({ theme }) => (theme === themes.dark ? \"#eee\" : \"#333\")};\n  font-size: 1.6rem;\n  border: none;\n  text-decoration: none;\n  text-align: center;\n  cursor: pointer;\n  transition: background 250ms ease-in-out, transform 150ms ease;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  &:disabled {\n    color: #ccc;\n    cursor: not-allowed;\n  }\n`;\n\nclass MediaControls extends React.Component {\n  componentWillMount() {\n    this.keyEvents = [\"r\", \"left\", \"right\", \"space\"];\n  }\n\n  render() {\n    return this.renderControls();\n  }\n\n  handleReload = () => {\n    this.props.reloadGame();\n  };\n\n  handlePlayPause = () => {\n    this.props.toggleGamePause();\n  };\n\n  handleBackward = () => {\n    this.props.stepBackwardFrame();\n  };\n\n  handleForward = () => {\n    this.props.stepForwardFrame();\n  };\n\n  handleKeyEvent = key => {\n    switch (key) {\n      case \"r\":\n        this.handleReload();\n        break;\n      case \"left\":\n        this.handleBackward();\n        break;\n      case \"right\":\n        this.handleForward();\n        break;\n      case \"space\":\n        this.handlePlayPause();\n        break;\n      default:\n        break;\n    }\n  };\n\n  renderControls() {\n    const { currentFrame, hideControls, paused, theme } = this.props;\n\n    return (\n      <MediaControlsWrapper hide={hideControls}>\n        <TurnCount>Turn: {currentFrame.turn}</TurnCount>\n        <ButtonWrapper>\n          <Button\n            onClick={this.handleReload}\n            disabled={currentFrame.turn === 0 || !paused}\n            theme={theme}\n          >\n            Reload\n          </Button>\n          <Button onClick={this.handlePlayPause} theme={theme}>\n            {paused ? \"Play\" : \"Pause\"}\n          </Button>\n          <Button\n            onClick={this.handleBackward}\n            disabled={currentFrame.turn === 0 || !paused}\n            theme={theme}\n          >\n            Backward\n          </Button>\n          <Button onClick={this.handleForward} disabled={!paused} theme={theme}>\n            Forward\n          </Button>\n          <KeyboardEventHandler\n            handleKeys={this.keyEvents}\n            onKeyEvent={this.handleKeyEvent}\n          />\n        </ButtonWrapper>\n      </MediaControlsWrapper>\n    );\n  }\n}\n\nexport default MediaControls;\n","import React from \"react\";\nimport styled from \"react-emotion\";\n\nimport BlankState from \"./blank-state\";\nimport LoadingIndicator from \"./loading-indicator\";\nimport Board from \"./board\";\nimport Scoreboard from \"./scoreboard\";\nimport MediaControls from \"./mediaControls\";\nimport { breakpoints, colors, themes } from \"../theme\";\n\nconst PageWrapper = styled(\"div\")`\n  position: relative;\n  height: 100%;\n  width: 100%;\n  background: ${({ theme }) =>\n    theme === themes.dark ? colors.purple : \"transparent\"};\n  background: ${({ theme }) =>\n    theme === themes.dark\n      ? `linear-gradient(45deg, #000 0%, ${colors.purple} 100%)`\n      : \"transparent\"};\n`;\n\nconst GameBoardWrapper = styled(\"div\")({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  width: \"100%\",\n  height: \"100%\"\n});\n\nconst BoardWrapper = styled(\"div\")`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n\n  @media (min-width: ${breakpoints.md}) {\n    width: ${({ hideScoreboard }) => (hideScoreboard ? \"100%\" : \"65vw\")};\n  }\n`;\n\nconst ScoreboardWrapper = styled(\"div\")`\n  display: none;\n  width: 35vw;\n  margin-left: 2rem;\n\n  @media (min-width: ${breakpoints.md}) {\n    display: ${({ hide }) => (hide ? \"none\" : \"block\")};\n  }\n`;\n\nclass Game extends React.Component {\n  componentWillMount() {\n    const { options } = this.props;\n\n    this.theme = this.props.options.boardTheme\n      ? this.props.options.boardTheme\n      : themes.light;\n\n    if (options.game && options.engine) {\n      this.hideScoreboard = this.props.options.hideScoreboard === \"true\";\n      this.props.setEngineOptions(options);\n      this.props.fetchFrames();\n    } else {\n      this.invalidArgs = true;\n    }\n  }\n\n  render() {\n    const { currentFrame } = this.props;\n\n    if (this.invalidArgs) {\n      return <BlankState />;\n    }\n\n    if (currentFrame) {\n      return this.renderGame();\n    }\n\n    return <LoadingIndicator />;\n  }\n\n  renderGame() {\n    return (\n      <PageWrapper theme={this.theme}>\n        <GameBoardWrapper>\n          <BoardWrapper hideScoreboard={this.hideScoreboard}>\n            <Board\n              snakes={this.props.currentFrame.snakes}\n              food={this.props.currentFrame.food}\n              columns={this.props.grid.width}\n              rows={this.props.grid.height}\n              highlightedSnake={this.props.highlightedSnake}\n              theme={this.theme}\n            />\n            <MediaControls\n              currentFrame={this.props.currentFrame}\n              hideControls={this.props.options.hideMediaControls === \"true\"}\n              reloadGame={this.props.reloadGame}\n              toggleGamePause={this.props.toggleGamePause}\n              stepBackwardFrame={this.props.stepBackwardFrame}\n              stepForwardFrame={this.props.stepForwardFrame}\n              paused={this.props.paused}\n              theme={this.theme}\n            />\n          </BoardWrapper>\n          {!this.hideScoreboard && (\n            <ScoreboardWrapper>\n              <Scoreboard\n                turn={this.props.currentFrame.turn}\n                snakes={this.props.currentFrame.snakes}\n                food={this.props.currentFrame.food}\n                highlightSnake={this.props.highlightSnake}\n                theme={this.theme}\n              />\n            </ScoreboardWrapper>\n          )}\n        </GameBoardWrapper>\n      </PageWrapper>\n    );\n  }\n}\n\nexport default Game;\n","import {\n  delay,\n  fetchGameStart,\n  getFrameByTurn,\n  streamAllFrames\n} from \"../utils/engine-client\";\n\nconst DEFAULT_FPS = 20;\n\nexport const setEngineOptions = engineOptions => ({\n  type: \"SET_ENGINE_OPTIONS\",\n  engineOptions\n});\n\nexport const gameOver = () => ({\n  type: \"GAME_OVER\"\n});\n\nexport const requestFrames = () => ({\n  type: \"REQUEST_FRAMES\"\n});\n\nexport const receiveFrame = (game, frame) => ({\n  type: \"RECEIVE_FRAME\",\n  game,\n  frame\n});\n\nexport const setCurrentFrame = frame => ({\n  type: \"SET_CURRENT_FRAME\",\n  frame\n});\n\nexport const setGameStatus = status => ({\n  type: \"SET_GAME_STATUS\",\n  status\n});\n\nexport const pauseGame = () => ({\n  type: \"PAUSE_GAME\"\n});\n\nexport const resumeGame = () => ({\n  type: \"RESUME_GAME\"\n});\n\nexport const highlightSnake = snakeId => ({\n  type: \"HIGHLIGHT_SNAKE\",\n  snakeId\n});\n\nexport const fetchFrames = () => {\n  return async (dispatch, getState) => {\n    const {\n      autoplay,\n      engine: engineUrl,\n      game: gameId,\n      turn\n    } = getState().engineOptions;\n\n    dispatch(requestFrames());\n\n    await streamAllFrames(engineUrl, gameId, (game, frame) => {\n      dispatch(setGameStatus(game.Game.Status));\n\n      // Workaround for bug where turn exluded on turn 0\n      frame.Turn = frame.Turn || 0;\n      dispatch(receiveFrame(game, frame));\n\n      // Workaround to render the first frame into the board\n      if (frame.Turn === 0) {\n        const frame = getState().frames[0];\n        dispatch(setCurrentFrame(frame));\n      }\n    });\n\n    if (autoplay) {\n      const frame = getState().frames[0];\n      dispatch(resumeGame());\n      dispatch(playFromFrame(frame));\n    }\n\n    // Only navigate to the specified frame if it is within the\n    // amount of frames available in the game\n    if (turn && turn <= getState().frames.length) {\n      const frame = getState().frames[turn];\n      dispatch(setCurrentFrame(frame));\n    }\n  };\n};\n\nexport const playFromFrame = frame => {\n  return async (dispatch, getState) => {\n    const { frameRate } = getState().engineOptions;\n    const frames = getState().frames.slice(); // Don't modify in place\n    const frameIndex = frames.indexOf(frame);\n    const slicedFrames = frames.slice(frameIndex);\n\n    const ceiledFps = Math.ceil(frameRate || DEFAULT_FPS);\n    const delayMillis = 1000 / ceiledFps;\n\n    for (const frame of slicedFrames) {\n      if (getState().paused) return;\n      dispatch(setCurrentFrame(frame));\n      await delay(delayMillis);\n    }\n\n    const lastFrame = slicedFrames[slicedFrames.length - 1];\n    if (lastFrame.gameOver) {\n      if (!getState().paused) dispatch(gameOver());\n    } else {\n      dispatch(playFromFrame(lastFrame));\n    }\n  };\n};\n\nexport const reloadGame = () => {\n  return async (dispatch, getState) => {\n    const { frames, paused } = getState();\n    if (paused) {\n      const frame = getFrameByTurn(frames, 0);\n      dispatch(setCurrentFrame(frame));\n    }\n  };\n};\n\nexport const toggleGamePause = () => {\n  return async (dispatch, getState) => {\n    const { currentFrame, gameStatus, paused, engineOptions } = getState();\n\n    if (paused) {\n      if (gameStatus === \"stopped\") {\n        await fetchGameStart(engineOptions.engine, engineOptions.game);\n        dispatch(fetchFrames());\n      }\n\n      dispatch(resumeGame());\n      dispatch(playFromFrame(currentFrame));\n    } else {\n      dispatch(pauseGame());\n    }\n  };\n};\n\nexport const stepForwardFrame = () => {\n  return async (dispatch, getState) => {\n    const { currentFrame, frames } = getState();\n    const nextFrame = currentFrame.turn + 1;\n    const stepToFrame = getFrameByTurn(frames, nextFrame);\n    if (stepToFrame) {\n      dispatch(setCurrentFrame(stepToFrame));\n    }\n  };\n};\n\nexport const stepBackwardFrame = () => {\n  return async (dispatch, getState) => {\n    const { currentFrame, frames } = getState();\n    const prevFrame = currentFrame.turn - 1;\n    const stepToFrame = getFrameByTurn(frames, prevFrame);\n    if (stepToFrame) {\n      dispatch(setCurrentFrame(stepToFrame));\n    }\n  };\n};\n","import { connect } from \"react-redux\";\nimport { parseQueryString } from \"../utils/url\";\nimport Game from \"../components/game\";\nimport {\n  fetchFrames,\n  reloadGame,\n  toggleGamePause,\n  setEngineOptions,\n  stepForwardFrame,\n  stepBackwardFrame,\n  highlightSnake\n} from \"../actions\";\n\nconst options = parseQueryString(window.location.search);\n\nconst mapStateToProps = state => {\n  return {\n    options: options,\n    grid: state.grid,\n    paused: state.paused,\n    currentFrame: state.currentFrame,\n    frames: state.frames,\n    highlightedSnake: state.highlightedSnake,\n    gameStatus: state.gameStatus\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setEngineOptions: options => dispatch(setEngineOptions(options)),\n  fetchFrames: () => dispatch(fetchFrames()),\n  reloadGame: () => dispatch(reloadGame()),\n  toggleGamePause: paused => dispatch(toggleGamePause(paused)),\n  stepForwardFrame: () => dispatch(stepForwardFrame()),\n  stepBackwardFrame: () => dispatch(stepBackwardFrame()),\n  highlightSnake: snakeId => dispatch(highlightSnake(snakeId))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Game);\n","import React from \"react\";\nimport { render } from \"react-dom\";\n// import { compose, createStore, applyMiddleware } from \"redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./reducers\";\nimport App from \"./containers/app\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst initialState = {\n  options: null,\n  grid: [],\n  frames: [],\n  paused: true,\n  highlightedSnake: null\n};\nconst middleware = applyMiddleware(thunkMiddleware);\nconst store = createStore(rootReducer, initialState, middleware);\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n// const store = createStore(\n//   rootReducer,\n//   initialState,\n//   composeEnhancers(applyMiddleware(thunkMiddleware))\n// );\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}